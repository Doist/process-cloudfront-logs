AWSTemplateFormatVersion: 2010-09-09
Description: >
  Create an Amazon S3 notification configuration for Lambda on an existing S3 bucket.
  Please see for details https://amzn.to/39qSPKC
Parameters:
  Source:
    Type: String
    Default: process-cloudfront-logs-in
    Description: Source S3 bucket
  Results:
    Type: String
    Default: process-cloudfront-logs-out
    Description: Destination S3 bucket.
  FunctionName:
    Type: String
    Default: process-cloudfront-logs
    Description: A name for a lambda function.
  Environment:
    Type: String
    Default: staging
    AllowedValues:
      - staging
      - production
    Description: Deployment environment (staging or production).

Resources:
  ProcessLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub "${FunctionName}-${Environment}"
      Role: !GetAtt LambdaRole.Arn
      Handler: process.lambda_handler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 300
      Code: process.py
      Environment:
        Variables:
          S3_DEST_BUCKET: !Ref Results

  LambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt ProcessLambdaFunction.Arn
      Action: "lambda:InvokeFunction"
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::${Source}"

  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${FunctionName}-${Environment}-lambda-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetBucketNotification"
                  - "s3:PutBucketNotification"
                Resource: !Sub "arn:aws:s3:::${Source}"
              - Effect: Allow
                Action: s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::${Results}/*"
              - Effect: Allow
                Action: s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${Source}/*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"

  CustomResourceLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Code:
        ZipFile: |

          from __future__ import print_function
          import json
          import boto3
          import cfnresponse

          SUCCESS = "SUCCESS"
          FAILED = "FAILED"

          print('Loading function')
          s3 = boto3.resource('s3')

          def lambda_handler(event, context):
              print("Received event: " + json.dumps(event, indent=2))
              responseData={}
              try:
                  if event['RequestType'] == 'Delete':
                      print("Request Type:",event['RequestType'])
                      Bucket=event['ResourceProperties']['Bucket']
                      delete_notification(Bucket)
                      print("Sending response to custom resource after Delete")
                  elif event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                      print("Request Type:",event['RequestType'])
                      LambdaArn=event['ResourceProperties']['LambdaArn']
                      Bucket=event['ResourceProperties']['Bucket']
                      add_notification(LambdaArn, Bucket)
                      responseData={'Bucket':Bucket}
                      print("Sending response to custom resource")
                  responseStatus = 'SUCCESS'
              except Exception as e:
                  print('Failed to process:', e)
                  responseStatus = 'FAILURE'
                  responseData = {'Failure': 'Something bad happened.'}
              cfnresponse.send(event, context, responseStatus, responseData)

          def add_notification(LambdaArn, Bucket):
              bucket_notification = s3.BucketNotification(Bucket)
              response = bucket_notification.put(
                NotificationConfiguration={
                  'LambdaFunctionConfigurations': [
                    {
                        'LambdaFunctionArn': LambdaArn,
                        'Events': ['s3:ObjectCreated:*'],
                        "Filter": {
                            "Key": {
                                "FilterRules": [{"Name": "prefix", "Value": "cf-logs/"},]
                            }
                        }
                    }
                  ]
                }
              )
              print("Put request completed....")

          def delete_notification(Bucket):
              bucket_notification = s3.BucketNotification(Bucket)
              response = bucket_notification.put(
                  NotificationConfiguration={}
              )
              print("Delete request completed....")
      Runtime: python3.6
      Timeout: 50

  LambdaTrigger:
    Type: "Custom::LambdaTrigger"
    DependsOn: LambdaInvokePermission
    Properties:
      ServiceToken: !GetAtt CustomResourceLambdaFunction.Arn
      LambdaArn: !GetAtt ProcessLambdaFunction.Arn
      Bucket: !Ref Source
